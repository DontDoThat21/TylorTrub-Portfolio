// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TylorTrubPortfolio.Server.BL.Data;

#nullable disable

namespace TylorTrubPortfolio.Server.BL.Migrations
{
    [DbContext(typeof(PortfolioDBContext))]
    [Migration("20240401214846_UpdatedContent")]
    partial class UpdatedContent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "SciFi"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "History"
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Torrance",
                            Name = "Tech Industrials",
                            PhoneNumber = "3105556612",
                            PostalCode = "98001",
                            State = "CA",
                            StreetAddress = "321 Tech St."
                        },
                        new
                        {
                            Id = 2,
                            City = "Royal Oak",
                            Name = "Elastic Books",
                            PhoneNumber = "2485556947",
                            PostalCode = "48312",
                            State = "MI",
                            StreetAddress = "912 Vilardo St."
                        },
                        new
                        {
                            Id = 3,
                            City = "Lala Land",
                            Name = "Readers Club",
                            PhoneNumber = "6725556993",
                            PostalCode = "99999",
                            State = "TN",
                            StreetAddress = "999 Main St."
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameName = "Hangman",
                            Preview = "hangman.png"
                        },
                        new
                        {
                            Id = 2,
                            GameName = "Simon Says",
                            Preview = "simonsays.png"
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brakes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotorcycleCc")
                        .HasColumnType("int");

                    b.Property<string>("MotorcycleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Torque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Year")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Motorcycles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddDate = new DateTime(2024, 4, 1, 17, 48, 46, 117, DateTimeKind.Local).AddTicks(3795),
                            Brakes = "Brembo",
                            EngineStyle = "Four Stroke V4",
                            Hp = "0",
                            Manufacturer = "Yamaha",
                            MotorcycleCc = 998,
                            MotorcycleName = "Yamaha MT-10",
                            Picture = "yamahamt10.jpg",
                            Torque = "110.8ft",
                            Year = (byte)19
                        },
                        new
                        {
                            Id = 2,
                            AddDate = new DateTime(2024, 4, 1, 17, 48, 46, 117, DateTimeKind.Local).AddTicks(3849),
                            Brakes = "Brembo",
                            EngineStyle = "Four Stroke Supercharged",
                            Hp = "0",
                            Manufacturer = "Kawasaki",
                            MotorcycleCc = 998,
                            MotorcycleName = "Kawasaki H2-R",
                            Picture = "kawasakih2r.png",
                            Torque = "115ft",
                            Year = (byte)23
                        },
                        new
                        {
                            Id = 3,
                            AddDate = new DateTime(2024, 4, 1, 17, 48, 46, 117, DateTimeKind.Local).AddTicks(3852),
                            Brakes = "1-Disc-Rear, 2-Front",
                            EngineStyle = "4-Stroke Twin Boxer",
                            Hp = "0",
                            Manufacturer = "BMW",
                            MotorcycleCc = 1085,
                            MotorcycleName = "BMW R1100RS",
                            Picture = "bmwk1100caferacer.jpg",
                            Torque = "92.9ft",
                            Year = (byte)2
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.MotorcycleVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotorcycleVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VideoUrl = "https://drive.google.com/file/d/12D9eX-sjUJpMIvm1I8EOrcaQVuusSnly/preview"
                        },
                        new
                        {
                            Id = 2,
                            VideoUrl = "https://drive.google.com/file/d/1BS-22PZ8CDcDwrdYnYJ6vXbQ3j4_UQD9/preview"
                        },
                        new
                        {
                            Id = 3,
                            VideoUrl = "https://drive.google.com/file/d/1Zu6tYhZ8rPyWbW-3zoFWW4yCCZ_Wqbj1/preview"
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.PortfolioImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortfolioImageVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayText = "I have managed and upgraded software systems in Los Angeles, Tennessee, and Detroit. Warehousing software work and various improvements ranges from the initial definition of what is included in a show, to the logistical transportation of goods to the show itself all through intranet software.",
                            FileName = "home1.jpg",
                            Name = "LA Flight View Home 1"
                        },
                        new
                        {
                            Id = 2,
                            DisplayText = "Working closely with shop carpenters and foreman, creating tailored applications was an exciting opportunity to growas a developer, and as a solutions architect.",
                            FileName = "homecawork2.jpg",
                            Name = "CA Work Warehouse 1"
                        },
                        new
                        {
                            Id = 3,
                            DisplayText = "I maintained, improved, and created paint management software as a developer, and as a solutions architect.",
                            FileName = "homemiwork1.jpg",
                            Name = "MI Work Paint 1"
                        },
                        new
                        {
                            Id = 4,
                            DisplayText = "I've built many desktops, but this has to be my most nostalgic build. A roughly rummaged together yet powerful machine to get the job done well is sometimes all it takes!",
                            FileName = "homedesktopcustom1.jpg",
                            Name = "Desktop MI Desktop AH 1"
                        },
                        new
                        {
                            Id = 5,
                            DisplayText = "My first professional desk after beginning a software engineering role, remotely. The pad at Boulevard Appts. was great, too many memories to count here. Would recommend.",
                            FileName = "homedesk1.jpg",
                            Name = "Home Desk MI Desk AH 1"
                        },
                        new
                        {
                            Id = 6,
                            DisplayText = "After a while I perfected my remote setup. Top monitor exclusively for StackOverflow and debugging knowledge/research!",
                            FileName = "homedeskwork1.jpg",
                            Name = "Desktop MI Desk AH 2"
                        },
                        new
                        {
                            Id = 7,
                            DisplayText = "I made custom Raspberry Pi projects come to life with HDMI inserts to feed off the current source, and thus illuminate the given corner/edge/vicinity with the same color, ambient style! Very neat project.",
                            FileName = "homecomputerprojectpi1.jpg",
                            Name = "Raspberry Pi MI Yoda 1"
                        },
                        new
                        {
                            Id = 8,
                            DisplayText = "Traveling to California is always fun even for work; upgrading older Windows machines and downloading software to run the warehouse is an interesting task.",
                            FileName = "homecawork1.jpg",
                            Name = "CA Work Warehouse 1"
                        },
                        new
                        {
                            Id = 9,
                            DisplayText = "As a teen, I moved to North Carolina with my family to finish school and continue my education towards being a software developer. NC being known for it's hills, I was quite the avid skateboarder.",
                            FileName = "home2.jpg",
                            Name = "Home 2"
                        },
                        new
                        {
                            Id = 10,
                            DisplayText = "Motorcycling is a big hobby of mine. As you scroll down, you will see more of my travels, what I like to do for fun,and core pieces of who I am.",
                            FileName = "homebike3.jpg",
                            Name = "Fox Hoodie DET Home 3"
                        },
                        new
                        {
                            Id = 11,
                            DisplayText = "Auburn Hills is a beautiful area, with tons of activities and exciting opportunities.",
                            FileName = "homeauburnhills1.jpg",
                            Name = "AH DET Apt 1"
                        },
                        new
                        {
                            Id = 12,
                            DisplayText = "It can even snow in Auburn Hills when it's sunny out!",
                            FileName = "homeauburnhills2.jpg",
                            Name = "AH DET Apt 2"
                        },
                        new
                        {
                            Id = 13,
                            DisplayText = "The snow build up can be quite intense at times. That's when you take off traction control, and find an empty parking lot!",
                            FileName = "homeauburnhills3.jpg",
                            Name = "AH DET Apt 3"
                        },
                        new
                        {
                            Id = 14,
                            DisplayText = "Crossing the Upper Peninsula of Michigan on a sport-bike is wild! The middle connection is grated, leaving you with an intimidating view looking down! It's worth it just to see all Michigan offers.",
                            FileName = "homedancininseptemba1.jpg",
                            Name = "CA Work Warehouse 1"
                        },
                        new
                        {
                            Id = 15,
                            DisplayText = "I decided to buy a dirt-bike and assemble it from Amazon. Seriously. Would not recommend! Fun building it and ripping around the dunes. One day I'll buy a real YZ250/450f.",
                            FileName = "homedirtbike1.jpg",
                            Name = "Desktop MI AH Bike 2"
                        },
                        new
                        {
                            Id = 16,
                            DisplayText = "Finishing the assembly was a joy, I ultimately replaced the carb with a newer custom higher throughput one. This noticeably increased the BHP by about 10%.",
                            FileName = "homedirtbike2.jpg",
                            Name = "Desktop MI AH Bike 2"
                        },
                        new
                        {
                            Id = 17,
                            DisplayText = "I am a big fan of Columbian espresso. Cafe La Llave is the best! Would add some French Vanilla at the end of preparation for a perfect treat! ",
                            FileName = "homeespresso1.jpg",
                            Name = "Desktop MI Espresso AH 1"
                        },
                        new
                        {
                            Id = 18,
                            DisplayText = "Gaming is in my blood! As a kid, I started getting into heavy back end programming with a title named Garry's Mod. Research TTT and look up WITD Server if curious!",
                            FileName = "homegaming1.jpg",
                            Name = "Gaming MI Halo 1"
                        },
                        new
                        {
                            Id = 19,
                            DisplayText = "StarCraft is my favorite game! It requires so much attention, and intense, quick multi-tasking proficiencies under stress. Something I consider myself skilled at, I love StarCraft even though some consider it too difficult to learn with all the casual titles out these days. Life is about mastering difficult things!",
                            FileName = "homegamingsc1.jpg",
                            Name = "Gaming MI Cuddles SC2 1"
                        },
                        new
                        {
                            Id = 20,
                            DisplayText = "Nothing like winding down with a beverage and some Dark Souls. Most challenging title I've every played with a controller by far! Dex builds know what's up!",
                            FileName = "homebikegaming3.jpg",
                            Name = "Gaming MI Dark Souls 1"
                        },
                        new
                        {
                            Id = 21,
                            DisplayText = "I used to take the scenic routes of Detroit after work, and just enjoy the sky. Nothing like the smell of the Earth's petrichor into a pleasant ride around town. Sure makes wheelies risky though!",
                            FileName = "homebikejoslyn1.jpg",
                            Name = "Motorcycling MI Joslyn 1"
                        },
                        new
                        {
                            Id = 22,
                            DisplayText = "Motorcycling with pals, and Baby Yoda sponsored FOX hoodies? Sign me up! I miss this hoodie and wish I could find a replacement. So many compliments with it!",
                            FileName = "homebikeyoda1.jpg",
                            Name = "Motorcycling MI Yoda 1"
                        },
                        new
                        {
                            Id = 23,
                            DisplayText = "I sort of enjoyed the experiences that COVID uniquely offered me. More room for motorcycles on the road; it was a great opportunity to improve my desktop, and enjoy a more balanced work-life from home at the same time. Win-win.",
                            FileName = "homedesk1.jpg",
                            Name = "Desk MI Signs 1"
                        },
                        new
                        {
                            Id = 24,
                            DisplayText = "The fam out here in NC is great! Nothing like spending time with those you love. From fishing, to driving to beautiful scenery, to concerts, we do it all!",
                            FileName = "homegroupnc1.jpg",
                            Name = "Home NC Group 1"
                        },
                        new
                        {
                            Id = 25,
                            DisplayText = "I really enjoy playing my guitar when I have the time to do so. One day I am sure I'll have a legendary guitar collection! *starts playing dear god by a7x*.",
                            FileName = "homeguitarpontiac1.jpg",
                            Name = "Desk MI Signs 1"
                        },
                        new
                        {
                            Id = 26,
                            DisplayText = "Michigan will probably always be 'home' to me; I was raised close to 9 mile and the streets here have definitely had a large influence on my life.",
                            FileName = "homemichigan1.jpg",
                            Name = "Home MI Sky 1"
                        },
                        new
                        {
                            Id = 27,
                            DisplayText = "I am a big fan of Bicycling! It's good exercise and I love to see new trails and new people who share the same hobby. Feels like you're part of a club or something sometimes..",
                            FileName = "homemichiganbike1.jpg",
                            Name = "Home MI Sky 1"
                        },
                        new
                        {
                            Id = 28,
                            DisplayText = "The beauty of Michigan is sometimes understated. You truly experience all seasons; the spring and fall feels like free air conditioning outside! It's great.",
                            FileName = "homemichiganboulevard1.jpg",
                            Name = "Home MI Sky 1"
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Billy Spark",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "SWD9999001",
                            ListPrice = 99.0,
                            Price = 90.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            Title = "Fortune of Time"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Nancy Hoover",
                            CategoryId = 1,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "CAW777777701",
                            ListPrice = 40.0,
                            Price = 30.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Title = "Dark Skies"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Julian Button",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "RITO5555501",
                            ListPrice = 55.0,
                            Price = 50.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            Title = "Vanish in the Sunset"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Abby Muscles",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "WS3333333301",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            Title = "Cotton Candy"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Ron Parker",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "SOTJ1111111101",
                            ListPrice = 30.0,
                            Price = 27.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Title = "Rock in the Ocean"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Laura Phantom",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero. Praesent molestie orci augue, vitae euismod velit sollicitudin ac. Praesent vestibulum facilisis nibh ut ultricies.\r\n\r\nNunc malesuada viverra ipsum sit amet tincidunt. ",
                            ISBN = "FOT000000001",
                            ListPrice = 25.0,
                            Price = 23.0,
                            Price100 = 20.0,
                            Price50 = 22.0,
                            Title = "Leaves and Wonders"
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "C# Maui",
                            Name = "MauiTodos",
                            ProjectPhoto = "mauiTodos.png",
                            Url = "https://github.com/DontDoThat21/NET7MauiWithSqliteTodos"
                        },
                        new
                        {
                            Id = 2,
                            Language = "TypeScript, JS, C#",
                            Name = "AngularEmployeeManager",
                            ProjectPhoto = "angularEmployeeManager.png",
                            Url = "https://github.com/DontDoThat21/Angular16"
                        },
                        new
                        {
                            Id = 3,
                            Language = "C#.NET FW",
                            Name = "AngularAPI",
                            ProjectPhoto = "angularEmployeeDepartmentAPI.png",
                            Url = "https://github.com/DontDoThat21/WebAPI"
                        },
                        new
                        {
                            Id = 4,
                            Language = "C#.NET FW",
                            Name = "HotSBot",
                            ProjectPhoto = "hotsBot.png",
                            Url = "https://github.com/DontDoThat21/HotSBot"
                        },
                        new
                        {
                            Id = 5,
                            Language = "Python 3.11",
                            Name = "Python Maze",
                            ProjectPhoto = "pythonMaze.png",
                            Url = "https://github.com/DontDoThat21/PythonMaze"
                        },
                        new
                        {
                            Id = 6,
                            Language = "C#.NET FW",
                            Name = "WinFormsTodos",
                            ProjectPhoto = "net7WinFormsSqlLiteTodos.png",
                            Url = "https://github.com/DontDoThat21/NET7WinFormsWithSqliteTodos"
                        },
                        new
                        {
                            Id = 7,
                            Language = "C#.NET Core WPF",
                            Name = "ModernDesignPizzaStore",
                            ProjectPhoto = "net7ModernWpf.png",
                            Url = "https://github.com/DontDoThat21/ModernDesignPizzaStore"
                        },
                        new
                        {
                            Id = 8,
                            Language = "C#.NET FW",
                            Name = "FlickrPhotoSearcher",
                            ProjectPhoto = "b.png",
                            Url = "https://github.com/DontDoThat21/PhotoSearcherFlickrAPI"
                        },
                        new
                        {
                            Id = 9,
                            Language = "C#.NET FW",
                            Name = "FrameworkWebForms",
                            ProjectPhoto = "b.png",
                            Url = "https://github.com/DontDoThat21/FrameworkWebForms"
                        },
                        new
                        {
                            Id = 10,
                            Language = "C++",
                            Name = "CppCalculator",
                            ProjectPhoto = "cppCalculator.png",
                            Url = "https://github.com/DontDoThat21/TylorTrubCppCalculator"
                        });
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.OrderDetail", b =>
                {
                    b.HasOne("TylorTrubPortfolio.DTO.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TylorTrubPortfolio.DTO.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.OrderHeader", b =>
                {
                    b.HasOne("TylorTrubPortfolio.DTO.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Product", b =>
                {
                    b.HasOne("TylorTrubPortfolio.DTO.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.ProductImage", b =>
                {
                    b.HasOne("TylorTrubPortfolio.DTO.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.ShoppingCart", b =>
                {
                    b.HasOne("TylorTrubPortfolio.DTO.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TylorTrubPortfolio.DTO.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.ApplicationUser", b =>
                {
                    b.HasOne("TylorTrubPortfolio.DTO.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TylorTrubPortfolio.DTO.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
